/**
 * @file hashmap.h
 *
 * @author Dalian University of Technology
 *
 * @section LICENSE
 *
 * Copyright (C) 2010 Dalian University of Technology
 *
 * This file is part of EDUGUI.
 *
 * EDUGUI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * EDUGUI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with EDUGUI; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
 * All rights reserved.
 **/

# ifndef _HASHMAP_H_
# define _HASHMAP_H_ 1

# include <base_type.h>

/* Don't define variables of this type by yourself */
struct hashmap_key
{
    const_addr_t key;
    ui_t size;
};

struct hashmap_pair
{
    /* Because of this member, variables of this type
     * must be generated by hashmap_pair_generate() */
    const struct hashmap_key key;
    addr_t value;
};

typedef ui_t (*hash_func_t)(struct hashmap_key *key, ui_t prime);
typedef ui_t (*probe_func_t)(struct hashmap *hashmap, ui_t src, struct hashmap_key *key);

/* Notice:
 * When setting a custom probing function, remember to change data_size
 * to a proper value.
 * When setting a custom data_size, remember(!) to USE ANOTHER PROBING
 * FUNCTION. See the comments on hashmap_default_probe_func() in
 * hashmap.c
 */
struct hashmap
{
    ui_t data_size;
    ui_t data_cnt;
    struct hashmap_pair *data;
    hash_func_t hash_func;
    probe_func_t probe_func;
    ui_t prime;
    f64_t grow_threshold;
    f64_t shrink_threshold;
};

si_t hashmap_init(struct hashmap *);

si_t hashmap_exit(struct hashmap *);

si_t hashmap_insert(struct hashmap *q, struct hashmap_pair *data);

struct hashmap_pair
hashmap_pair_generate(const_addr_t key, ui_t key_size, addr_t value);
